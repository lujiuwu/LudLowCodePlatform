{"version":3,"file":"js/chunk-element-plus-2c7e031f.8e1afcf3.js","mappings":"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","sources":["webpack://lud/../../../packages/components/checkbox/src/checkbox.ts","webpack://lud/../../../packages/components/checkbox/src/constants.ts","webpack://lud/../../../packages/components/checkbox/src/composables/use-checkbox-disabled.ts","webpack://lud/../../../packages/components/checkbox/src/composables/use-checkbox-event.ts","webpack://lud/../../../packages/components/checkbox/src/composables/use-checkbox-model.ts","webpack://lud/../../../packages/components/checkbox/src/composables/use-checkbox-status.ts","webpack://lud/../../../packages/components/checkbox/src/composables/use-checkbox.ts","webpack://lud/../../../packages/components/checkbox/src/checkbox.vue","webpack://lud/../../../packages/components/checkbox/src/checkbox-button.vue","webpack://lud/../../../packages/components/checkbox/src/checkbox-group.ts","webpack://lud/../../../packages/components/checkbox/src/checkbox-group.vue","webpack://lud/../../../packages/components/checkbox/index.ts","webpack://lud/../../../internal/build/plugin-vue:export-helper","webpack://lud/../../../packages/components/badge/src/badge.ts","webpack://lud/../../../packages/components/badge/src/badge.vue","webpack://lud/../../../packages/components/badge/index.ts","webpack://lud/../../../packages/components/button/src/constants.ts","webpack://lud/../../../packages/components/button/src/use-button.ts","webpack://lud/../../../packages/components/button/src/button.ts","webpack://lud/../../../packages/components/button/src/button-custom.ts","webpack://lud/../../../packages/components/button/src/button.vue","webpack://lud/../../../packages/components/button/src/button-group.ts","webpack://lud/../../../packages/components/button/src/button-group.vue","webpack://lud/../../../packages/components/button/index.ts"],"sourcesContent":["import { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useAriaProps, useSizeProp } from '@element-plus/hooks'\nimport { isBoolean, isNumber, isString } from '@element-plus/utils'\n\nimport type { ExtractPropTypes, __ExtractPublicPropTypes } from 'vue'\nimport type Checkbox from './checkbox.vue'\n\nexport type CheckboxValueType = string | number | boolean\n\nexport const checkboxProps = {\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: [Number, String, Boolean],\n    default: undefined,\n  },\n  /**\n   * @description label of the Checkbox when used inside a `checkbox-group`\n   */\n  label: {\n    type: [String, Boolean, Number, Object],\n    default: undefined,\n  },\n  /**\n   * @description value of the Checkbox when used inside a `checkbox-group`\n   */\n  value: {\n    type: [String, Boolean, Number, Object],\n    default: undefined,\n  },\n  /**\n   * @description Set indeterminate state, only responsible for style control\n   */\n  indeterminate: Boolean,\n  /**\n   * @description whether the Checkbox is disabled\n   */\n  disabled: Boolean,\n  /**\n   * @description if the Checkbox is checked\n   */\n  checked: Boolean,\n  /**\n   * @description native 'name' attribute\n   */\n  name: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description value of the Checkbox if it's checked\n   */\n  trueValue: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @description value of the Checkbox if it's not checked\n   */\n  falseValue: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @deprecated use `trueValue` instead\n   * @description value of the Checkbox if it's checked\n   */\n  trueLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @deprecated use `falseValue` instead\n   * @description value of the Checkbox if it's not checked\n   */\n  falseLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @description input id\n   */\n  id: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description whether to add a border around Checkbox\n   */\n  border: Boolean,\n  /**\n   * @description size of the Checkbox\n   */\n  size: useSizeProp,\n  /**\n   * @description input tabindex\n   */\n  tabindex: [String, Number],\n  /**\n   * @description whether to trigger form validation\n   */\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n  ...useAriaProps(['ariaControls']),\n}\n\nexport const checkboxEmits = {\n  [UPDATE_MODEL_EVENT]: (val: CheckboxValueType) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n  change: (val: CheckboxValueType) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n}\n\nexport type CheckboxProps = ExtractPropTypes<typeof checkboxProps>\nexport type CheckboxPropsPublic = __ExtractPublicPropTypes<typeof checkboxProps>\nexport type CheckboxEmits = typeof checkboxEmits\nexport type CheckboxInstance = InstanceType<typeof Checkbox> & unknown\n","import type { InjectionKey, ToRefs, WritableComputedRef } from 'vue'\nimport type { CheckboxGroupProps } from './checkbox-group'\n\ntype CheckboxGroupContext = {\n  modelValue?: WritableComputedRef<any>\n  changeEvent?: (...args: any) => any\n} & ToRefs<\n  Pick<\n    CheckboxGroupProps,\n    'size' | 'min' | 'max' | 'disabled' | 'validateEvent' | 'fill' | 'textColor'\n  >\n>\n\nexport const checkboxGroupContextKey: InjectionKey<CheckboxGroupContext> =\n  Symbol('checkboxGroupContextKey')\n","import { computed, inject } from 'vue'\nimport { useFormDisabled } from '@element-plus/components/form'\nimport { isUndefined } from '@element-plus/utils'\nimport { checkboxGroupContextKey } from '../constants'\n\nimport type { CheckboxModel, CheckboxStatus } from '../composables'\n\nexport const useCheckboxDisabled = ({\n  model,\n  isChecked,\n}: Pick<CheckboxModel, 'model'> & Pick<CheckboxStatus, 'isChecked'>) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n\n  const isLimitDisabled = computed(() => {\n    const max = checkboxGroup?.max?.value\n    const min = checkboxGroup?.min?.value\n    return (\n      (!isUndefined(max) && model.value.length >= max && !isChecked.value) ||\n      (!isUndefined(min) && model.value.length <= min && isChecked.value)\n    )\n  })\n\n  const isDisabled = useFormDisabled(\n    computed(() => checkboxGroup?.disabled.value || isLimitDisabled.value)\n  )\n\n  return {\n    isDisabled,\n    isLimitDisabled,\n  }\n}\n\nexport type CheckboxDisabled = ReturnType<typeof useCheckboxDisabled>\n","import { computed, getCurrentInstance, inject, nextTick, watch } from 'vue'\nimport { useFormItem } from '@element-plus/components/form'\nimport { debugWarn } from '@element-plus/utils'\nimport { CHANGE_EVENT } from '@element-plus/constants'\nimport { checkboxGroupContextKey } from '../constants'\n\nimport type { useFormItemInputId } from '@element-plus/components/form'\nimport type { CheckboxProps } from '../checkbox'\nimport type {\n  CheckboxDisabled,\n  CheckboxModel,\n  CheckboxStatus,\n} from '../composables'\n\nexport const useCheckboxEvent = (\n  props: CheckboxProps,\n  {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  }: Pick<CheckboxModel, 'model' | 'isLimitExceeded'> &\n    Pick<CheckboxStatus, 'hasOwnLabel'> &\n    Pick<CheckboxDisabled, 'isDisabled'> &\n    Pick<ReturnType<typeof useFormItemInputId>, 'isLabeledByFormItem'>\n) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n  const { formItem } = useFormItem()\n  const { emit } = getCurrentInstance()!\n\n  function getLabeledValue(value: string | number | boolean) {\n    return [true, props.trueValue, props.trueLabel].includes(value)\n      ? props.trueValue ?? props.trueLabel ?? true\n      : props.falseValue ?? props.falseLabel ?? false\n  }\n\n  function emitChangeEvent(\n    checked: string | number | boolean,\n    e: InputEvent | MouseEvent\n  ) {\n    emit(CHANGE_EVENT, getLabeledValue(checked), e)\n  }\n\n  function handleChange(e: Event) {\n    if (isLimitExceeded.value) return\n\n    const target = e.target as HTMLInputElement\n    emit(CHANGE_EVENT, getLabeledValue(target.checked), e)\n  }\n\n  async function onClickRoot(e: MouseEvent) {\n    if (isLimitExceeded.value) return\n\n    if (!hasOwnLabel.value && !isDisabled.value && isLabeledByFormItem.value) {\n      // fix: https://github.com/element-plus/element-plus/issues/9981\n      const eventTargets: EventTarget[] = e.composedPath()\n      const hasLabel = eventTargets.some(\n        (item) => (item as HTMLElement).tagName === 'LABEL'\n      )\n      if (!hasLabel) {\n        model.value = getLabeledValue(\n          [false, props.falseValue, props.falseLabel].includes(model.value)\n        )\n        await nextTick()\n        emitChangeEvent(model.value, e)\n      }\n    }\n  }\n\n  const validateEvent = computed(\n    () => checkboxGroup?.validateEvent || props.validateEvent\n  )\n\n  watch(\n    () => props.modelValue,\n    () => {\n      if (validateEvent.value) {\n        formItem?.validate('change').catch((err) => debugWarn(err))\n      }\n    }\n  )\n\n  return {\n    handleChange,\n    onClickRoot,\n  }\n}\n","import { computed, getCurrentInstance, inject, ref } from 'vue'\nimport { isArray, isUndefined } from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { checkboxGroupContextKey } from '../constants'\n\nimport type { CheckboxProps } from '../checkbox'\n\nexport const useCheckboxModel = (props: CheckboxProps) => {\n  const selfModel = ref<unknown>(false)\n  const { emit } = getCurrentInstance()!\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n  const isGroup = computed(() => isUndefined(checkboxGroup) === false)\n  const isLimitExceeded = ref(false)\n  const model = computed({\n    get() {\n      return isGroup.value\n        ? checkboxGroup?.modelValue?.value\n        : props.modelValue ?? selfModel.value\n    },\n\n    set(val: unknown) {\n      if (isGroup.value && isArray(val)) {\n        isLimitExceeded.value =\n          checkboxGroup?.max?.value !== undefined &&\n          val.length > checkboxGroup?.max.value &&\n          val.length > model.value.length\n        isLimitExceeded.value === false && checkboxGroup?.changeEvent?.(val)\n      } else {\n        emit(UPDATE_MODEL_EVENT, val)\n        selfModel.value = val\n      }\n    },\n  })\n\n  return {\n    model,\n    isGroup,\n    isLimitExceeded,\n  }\n}\n\nexport type CheckboxModel = ReturnType<typeof useCheckboxModel>\n","import { computed, inject, ref, toRaw } from 'vue'\nimport { isEqual } from 'lodash-unified'\nimport { useFormSize } from '@element-plus/components/form'\nimport { isArray, isBoolean, isObject, isPropAbsent } from '@element-plus/utils'\nimport { checkboxGroupContextKey } from '../constants'\n\nimport type { ComponentInternalInstance } from 'vue'\nimport type { CheckboxProps } from '../checkbox'\nimport type { CheckboxModel } from '../composables'\n\nexport const useCheckboxStatus = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots'],\n  { model }: Pick<CheckboxModel, 'model'>\n) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n  const isFocused = ref(false)\n  const actualValue = computed(() => {\n    // In version 2.x, if there's no props.value, props.label will act as props.value\n    // In version 3.x, remove this computed value, use props.value instead.\n    if (!isPropAbsent(props.value)) {\n      return props.value\n    }\n    return props.label\n  })\n  const isChecked = computed<boolean>(() => {\n    const value = model.value\n    if (isBoolean(value)) {\n      return value\n    } else if (isArray(value)) {\n      if (isObject(actualValue.value)) {\n        return value.map(toRaw).some((o) => isEqual(o, actualValue.value))\n      } else {\n        return value.map(toRaw).includes(actualValue.value)\n      }\n    } else if (value !== null && value !== undefined) {\n      return value === props.trueValue || value === props.trueLabel\n    } else {\n      return !!value\n    }\n  })\n\n  const checkboxButtonSize = useFormSize(\n    computed(() => checkboxGroup?.size?.value),\n    {\n      prop: true,\n    }\n  )\n  const checkboxSize = useFormSize(computed(() => checkboxGroup?.size?.value))\n\n  const hasOwnLabel = computed<boolean>(() => {\n    return !!slots.default || !isPropAbsent(actualValue.value)\n  })\n\n  return {\n    checkboxButtonSize,\n    isChecked,\n    isFocused,\n    checkboxSize,\n    hasOwnLabel,\n    actualValue,\n  }\n}\n\nexport type CheckboxStatus = ReturnType<typeof useCheckboxStatus>\n","import { computed } from 'vue'\nimport { useFormItem, useFormItemInputId } from '@element-plus/components/form'\nimport { isArray, isPropAbsent } from '@element-plus/utils'\nimport { useDeprecated } from '@element-plus/hooks'\nimport { useCheckboxDisabled } from './use-checkbox-disabled'\nimport { useCheckboxEvent } from './use-checkbox-event'\nimport { useCheckboxModel } from './use-checkbox-model'\nimport { useCheckboxStatus } from './use-checkbox-status'\n\nimport type { ComponentInternalInstance } from 'vue'\nimport type { CheckboxProps } from '../checkbox'\n\nexport const useCheckbox = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots']\n) => {\n  const { formItem: elFormItem } = useFormItem()\n  const { model, isGroup, isLimitExceeded } = useCheckboxModel(props)\n  const {\n    isFocused,\n    isChecked,\n    checkboxButtonSize,\n    checkboxSize,\n    hasOwnLabel,\n    actualValue,\n  } = useCheckboxStatus(props, slots, { model })\n  const { isDisabled } = useCheckboxDisabled({ model, isChecked })\n  const { inputId, isLabeledByFormItem } = useFormItemInputId(props, {\n    formItemContext: elFormItem,\n    disableIdGeneration: hasOwnLabel,\n    disableIdManagement: isGroup,\n  })\n  const { handleChange, onClickRoot } = useCheckboxEvent(props, {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  })\n\n  const setStoreValue = () => {\n    function addToStore() {\n      if (isArray(model.value) && !model.value.includes(actualValue.value)) {\n        model.value.push(actualValue.value)\n      } else {\n        model.value = props.trueValue ?? props.trueLabel ?? true\n      }\n    }\n    props.checked && addToStore()\n  }\n\n  setStoreValue()\n\n  useDeprecated(\n    {\n      from: 'label act as value',\n      replacement: 'value',\n      version: '3.0.0',\n      scope: 'el-checkbox',\n      ref: 'https://element-plus.org/en-US/component/checkbox.html',\n    },\n    computed(() => isGroup.value && isPropAbsent(props.value))\n  )\n\n  useDeprecated(\n    {\n      from: 'true-label',\n      replacement: 'true-value',\n      version: '3.0.0',\n      scope: 'el-checkbox',\n      ref: 'https://element-plus.org/en-US/component/checkbox.html',\n    },\n    computed(() => !!props.trueLabel)\n  )\n\n  useDeprecated(\n    {\n      from: 'false-label',\n      replacement: 'false-value',\n      version: '3.0.0',\n      scope: 'el-checkbox',\n      ref: 'https://element-plus.org/en-US/component/checkbox.html',\n    },\n    computed(() => !!props.falseLabel)\n  )\n\n  return {\n    inputId,\n    isLabeledByFormItem,\n    isChecked,\n    isDisabled,\n    isFocused,\n    checkboxButtonSize,\n    checkboxSize,\n    hasOwnLabel,\n    model,\n    actualValue,\n    handleChange,\n    onClickRoot,\n  }\n}\n","<template>\n  <component\n    :is=\"!hasOwnLabel && isLabeledByFormItem ? 'span' : 'label'\"\n    :class=\"compKls\"\n    :aria-controls=\"indeterminate ? ariaControls : null\"\n    @click=\"onClickRoot\"\n  >\n    <span :class=\"spanKls\">\n      <input\n        v-if=\"trueValue || falseValue || trueLabel || falseLabel\"\n        :id=\"inputId\"\n        v-model=\"model\"\n        :class=\"ns.e('original')\"\n        type=\"checkbox\"\n        :indeterminate=\"indeterminate\"\n        :name=\"name\"\n        :tabindex=\"tabindex\"\n        :disabled=\"isDisabled\"\n        :true-value=\"trueValue ?? trueLabel ?? true\"\n        :false-value=\"falseValue ?? falseLabel ?? false\"\n        @change=\"handleChange\"\n        @focus=\"isFocused = true\"\n        @blur=\"isFocused = false\"\n        @click.stop\n      />\n      <input\n        v-else\n        :id=\"inputId\"\n        v-model=\"model\"\n        :class=\"ns.e('original')\"\n        type=\"checkbox\"\n        :indeterminate=\"indeterminate\"\n        :disabled=\"isDisabled\"\n        :value=\"actualValue\"\n        :name=\"name\"\n        :tabindex=\"tabindex\"\n        @change=\"handleChange\"\n        @focus=\"isFocused = true\"\n        @blur=\"isFocused = false\"\n        @click.stop\n      />\n      <span :class=\"ns.e('inner')\" />\n    </span>\n    <span v-if=\"hasOwnLabel\" :class=\"ns.e('label')\">\n      <slot />\n      <template v-if=\"!$slots.default\">{{ label }}</template>\n    </span>\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, useSlots } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { checkboxEmits, checkboxProps } from './checkbox'\nimport { useCheckbox } from './composables'\n\ndefineOptions({\n  name: 'ElCheckbox',\n})\n\nconst props = defineProps(checkboxProps)\ndefineEmits(checkboxEmits)\nconst slots = useSlots()\n\nconst {\n  inputId,\n  isLabeledByFormItem,\n  isChecked,\n  isDisabled,\n  isFocused,\n  checkboxSize,\n  hasOwnLabel,\n  model,\n  actualValue,\n  handleChange,\n  onClickRoot,\n} = useCheckbox(props, slots)\n\nconst ns = useNamespace('checkbox')\n\nconst compKls = computed(() => {\n  return [\n    ns.b(),\n    ns.m(checkboxSize.value),\n    ns.is('disabled', isDisabled.value),\n    ns.is('bordered', props.border),\n    ns.is('checked', isChecked.value),\n  ]\n})\n\nconst spanKls = computed(() => {\n  return [\n    ns.e('input'),\n    ns.is('disabled', isDisabled.value),\n    ns.is('checked', isChecked.value),\n    ns.is('indeterminate', props.indeterminate),\n    ns.is('focus', isFocused.value),\n  ]\n})\n</script>\n","<template>\n  <label :class=\"labelKls\">\n    <input\n      v-if=\"trueValue || falseValue || trueLabel || falseLabel\"\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :true-value=\"trueValue ?? trueLabel ?? true\"\n      :false-value=\"falseValue ?? falseLabel ?? false\"\n      @change=\"handleChange\"\n      @focus=\"isFocused = true\"\n      @blur=\"isFocused = false\"\n      @click.stop\n    />\n    <input\n      v-else\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :value=\"actualValue\"\n      @change=\"handleChange\"\n      @focus=\"isFocused = true\"\n      @blur=\"isFocused = false\"\n      @click.stop\n    />\n\n    <span\n      v-if=\"$slots.default || label\"\n      :class=\"ns.be('button', 'inner')\"\n      :style=\"isChecked ? activeStyle : undefined\"\n    >\n      <slot>{{ label }}</slot>\n    </span>\n  </label>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, useSlots } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { checkboxGroupContextKey } from './constants'\nimport { useCheckbox } from './composables'\nimport { checkboxEmits, checkboxProps } from './checkbox'\n\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElCheckboxButton',\n})\n\nconst props = defineProps(checkboxProps)\ndefineEmits(checkboxEmits)\nconst slots = useSlots()\n\nconst {\n  isFocused,\n  isChecked,\n  isDisabled,\n  checkboxButtonSize,\n  model,\n  actualValue,\n  handleChange,\n} = useCheckbox(props, slots)\nconst checkboxGroup = inject(checkboxGroupContextKey, undefined)\nconst ns = useNamespace('checkbox')\n\nconst activeStyle = computed<CSSProperties>(() => {\n  const fillValue = checkboxGroup?.fill?.value ?? ''\n  return {\n    backgroundColor: fillValue,\n    borderColor: fillValue,\n    color: checkboxGroup?.textColor?.value ?? '',\n    boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : undefined,\n  }\n})\n\nconst labelKls = computed(() => {\n  return [\n    ns.b('button'),\n    ns.bm('button', checkboxButtonSize.value),\n    ns.is('disabled', isDisabled.value),\n    ns.is('checked', isChecked.value),\n    ns.is('focus', isFocused.value),\n  ]\n})\n</script>\n","import { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useAriaProps, useSizeProp } from '@element-plus/hooks'\nimport { buildProps, definePropType, isArray } from '@element-plus/utils'\n\nimport type { ExtractPropTypes, __ExtractPublicPropTypes } from 'vue'\nimport type checkboxGroup from './checkbox-group.vue'\nimport type { CheckboxPropsPublic, CheckboxValueType } from './checkbox'\n\nexport type CheckboxGroupValueType = Exclude<CheckboxValueType, boolean>[]\n\nexport const checkboxGroupProps = buildProps({\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: definePropType<CheckboxGroupValueType>(Array),\n    default: () => [],\n  },\n  /**\n   * @description whether the nesting checkboxes are disabled\n   */\n  disabled: Boolean,\n  /**\n   * @description minimum number of checkbox checked\n   */\n  min: Number,\n  /**\n   * @description maximum number of checkbox checked\n   */\n  max: Number,\n  /**\n   * @description size of checkbox\n   */\n  size: useSizeProp,\n  /**\n   * @description border and background color when button is active\n   */\n  fill: String,\n  /**\n   * @description font color when button is active\n   */\n  textColor: String,\n  /**\n   * @description element tag of the checkbox group\n   */\n  tag: {\n    type: String,\n    default: 'div',\n  },\n  /**\n   * @description whether to trigger form validation\n   */\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n  options: {\n    type: definePropType<CheckboxOption[]>(Array),\n  },\n  props: {\n    type: definePropType<CheckboxOptionProps>(Object),\n    default: () => checkboxDefaultProps,\n  },\n  ...useAriaProps(['ariaLabel']),\n} as const)\n\nexport const checkboxGroupEmits = {\n  [UPDATE_MODEL_EVENT]: (val: CheckboxGroupValueType) => isArray(val),\n  change: (val: CheckboxValueType[]) => isArray(val),\n}\n\nexport type CheckboxGroupProps = ExtractPropTypes<typeof checkboxGroupProps>\nexport type CheckboxGroupPropsPublic = __ExtractPublicPropTypes<\n  typeof checkboxGroupProps\n>\nexport type CheckboxGroupEmits = typeof checkboxGroupEmits\nexport type CheckboxGroupInstance = InstanceType<typeof checkboxGroup> & unknown\n\nexport type CheckboxOption = CheckboxPropsPublic & Record<string, any>\n\ntype CheckboxOptionProps = {\n  value?: string\n  label?: string\n  disabled?: string\n}\nexport const checkboxDefaultProps: Required<CheckboxOptionProps> = {\n  label: 'label',\n  value: 'value',\n  disabled: 'disabled',\n}\n","<template>\n  <component\n    :is=\"tag\"\n    :id=\"groupId\"\n    :class=\"ns.b('group')\"\n    role=\"group\"\n    :aria-label=\"\n      !isLabeledByFormItem ? ariaLabel || 'checkbox-group' : undefined\n    \"\n    :aria-labelledby=\"isLabeledByFormItem ? formItem?.labelId : undefined\"\n  >\n    <slot>\n      <el-checkbox\n        v-for=\"(item, index) in props.options\"\n        :key=\"index\"\n        v-bind=\"getOptionProps(item)\"\n      />\n    </slot>\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, provide, toRefs, watch } from 'vue'\nimport { isEqual, pick } from 'lodash-unified'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormItem, useFormItemInputId } from '@element-plus/components/form'\nimport {\n  checkboxDefaultProps,\n  checkboxGroupEmits,\n  checkboxGroupProps,\n} from './checkbox-group'\nimport { checkboxGroupContextKey } from './constants'\nimport ElCheckbox from './checkbox.vue'\n\nimport type { CheckboxGroupValueType } from './checkbox-group'\n\ndefineOptions({\n  name: 'ElCheckboxGroup',\n})\n\nconst props = defineProps(checkboxGroupProps)\nconst emit = defineEmits(checkboxGroupEmits)\nconst ns = useNamespace('checkbox')\n\nconst { formItem } = useFormItem()\nconst { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst changeEvent = async (value: CheckboxGroupValueType) => {\n  emit(UPDATE_MODEL_EVENT, value)\n  await nextTick()\n  emit(CHANGE_EVENT, value)\n}\n\nconst modelValue = computed({\n  get() {\n    return props.modelValue\n  },\n  set(val: CheckboxGroupValueType) {\n    changeEvent(val)\n  },\n})\n\nconst aliasProps = computed(() => ({\n  ...checkboxDefaultProps,\n  ...props.props,\n}))\nconst getOptionProps = (option: Record<string, any>) => {\n  const base = {\n    label: option[aliasProps.value.label],\n    value: option[aliasProps.value.value],\n    disabled: option[aliasProps.value.disabled],\n  }\n  return { ...option, ...base }\n}\n\nprovide(checkboxGroupContextKey, {\n  ...pick(toRefs(props), [\n    'size',\n    'min',\n    'max',\n    'disabled',\n    'validateEvent',\n    'fill',\n    'textColor',\n  ]),\n  modelValue,\n  changeEvent,\n})\n\nwatch(\n  () => props.modelValue,\n  (newVal, oldValue) => {\n    if (props.validateEvent && !isEqual(newVal, oldValue)) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n</script>\n","import { withInstall, withNoopInstall } from '@element-plus/utils'\nimport Checkbox from './src/checkbox.vue'\nimport CheckboxButton from './src/checkbox-button.vue'\nimport CheckboxGroup from './src/checkbox-group.vue'\n\nimport type { SFCWithInstall } from '@element-plus/utils'\n\nexport const ElCheckbox: SFCWithInstall<typeof Checkbox> & {\n  CheckboxButton: typeof CheckboxButton\n  CheckboxGroup: typeof CheckboxGroup\n} = withInstall(Checkbox, {\n  CheckboxButton,\n  CheckboxGroup,\n})\nexport default ElCheckbox\n\nexport const ElCheckboxButton: SFCWithInstall<typeof CheckboxButton> =\n  withNoopInstall(CheckboxButton)\nexport const ElCheckboxGroup: SFCWithInstall<typeof CheckboxGroup> =\n  withNoopInstall(CheckboxGroup)\n\nexport * from './src/checkbox-group'\nexport * from './src/checkbox'\nexport * from './src/constants'\n","\nexport default (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n  return target;\n}\n","import { buildProps, definePropType } from '@element-plus/utils'\n\nimport type {\n  ExtractPropTypes,\n  StyleValue,\n  __ExtractPublicPropTypes,\n} from 'vue'\n\nexport const badgeProps = buildProps({\n  /**\n   * @description display value.\n   */\n  value: {\n    type: [String, Number],\n    default: '',\n  },\n  /**\n   * @description maximum value, shows `{max}+` when exceeded. Only works if value is a number.\n   */\n  max: {\n    type: Number,\n    default: 99,\n  },\n  /**\n   * @description if a little dot is displayed.\n   */\n  isDot: Boolean,\n  /**\n   * @description hidden badge.\n   */\n  hidden: Boolean,\n  /**\n   * @description badge type.\n   */\n  type: {\n    type: String,\n    values: ['primary', 'success', 'warning', 'info', 'danger'],\n    default: 'danger',\n  },\n  /**\n   * @description whether to show badge when value is zero.\n   */\n  showZero: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description customize dot background color\n   */\n  color: String,\n  /**\n   * @description CSS style of badge\n   */\n  badgeStyle: {\n    type: definePropType<StyleValue>([String, Object, Array]),\n  },\n  /**\n   * @description set offset of the badge\n   */\n  offset: {\n    type: definePropType<[number, number]>(Array),\n    default: [0, 0],\n  },\n  /**\n   * @description custom class name of badge\n   */\n  badgeClass: {\n    type: String,\n  },\n} as const)\nexport type BadgeProps = ExtractPropTypes<typeof badgeProps>\nexport type BadgePropsPublic = __ExtractPublicPropTypes<typeof badgeProps>\n","<template>\n  <div :class=\"ns.b()\">\n    <slot />\n    <transition :name=\"`${ns.namespace.value}-zoom-in-center`\">\n      <sup\n        v-show=\"!hidden && (content || isDot || $slots.content)\"\n        :class=\"[\n          ns.e('content'),\n          ns.em('content', type),\n          ns.is('fixed', !!$slots.default),\n          ns.is('dot', isDot),\n          ns.is('hide-zero', !showZero && props.value === 0),\n          badgeClass,\n        ]\"\n        :style=\"style\"\n      >\n        <slot name=\"content\" :value=\"content\">\n          {{ content }}\n        </slot>\n      </sup>\n    </transition>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { addUnit, isNumber } from '@element-plus/utils'\nimport { badgeProps } from './badge'\n\nimport type { StyleValue } from 'vue'\n\ndefineOptions({\n  name: 'ElBadge',\n})\n\nconst props = defineProps(badgeProps)\n\nconst ns = useNamespace('badge')\n\nconst content = computed<string>(() => {\n  if (props.isDot) return ''\n  if (isNumber(props.value) && isNumber(props.max)) {\n    return props.max < props.value ? `${props.max}+` : `${props.value}`\n  }\n  return `${props.value}`\n})\n\nconst style = computed<StyleValue>(() => {\n  return [\n    {\n      backgroundColor: props.color,\n      marginRight: addUnit(-(props.offset?.[0] ?? 0)),\n      marginTop: addUnit(props.offset?.[1] ?? 0),\n    },\n    props.badgeStyle ?? {},\n  ]\n})\n\ndefineExpose({\n  /** @description badge content */\n  content,\n})\n</script>\n","import { withInstall } from '@element-plus/utils'\nimport Badge from './src/badge.vue'\n\nimport type { SFCWithInstall } from '@element-plus/utils'\n\nexport const ElBadge: SFCWithInstall<typeof Badge> = withInstall(Badge)\nexport default ElBadge\n\nexport * from './src/badge'\nexport type { BadgeInstance } from './src/instance'\n","import type { InjectionKey } from 'vue'\nimport type { ButtonProps } from './button'\n\nexport interface ButtonGroupContext {\n  size?: ButtonProps['size']\n  type?: ButtonProps['type']\n}\n\nexport const buttonGroupContextKey: InjectionKey<ButtonGroupContext> = Symbol(\n  'buttonGroupContextKey'\n)\n","import { Text, computed, inject, ref, useSlots } from 'vue'\nimport {\n  useFormDisabled,\n  useFormItem,\n  useFormSize,\n} from '@element-plus/components/form'\nimport { useGlobalConfig } from '@element-plus/components/config-provider'\nimport { useDeprecated } from '@element-plus/hooks'\nimport { buttonGroupContextKey } from './constants'\n\nimport type { SetupContext } from 'vue'\nimport type { ButtonEmits, ButtonProps } from './button'\n\nexport const useButton = (\n  props: ButtonProps,\n  emit: SetupContext<ButtonEmits>['emit']\n) => {\n  useDeprecated(\n    {\n      from: 'type.text',\n      replacement: 'link',\n      version: '3.0.0',\n      scope: 'props',\n      ref: 'https://element-plus.org/en-US/component/button.html#button-attributes',\n    },\n    computed(() => props.type === 'text')\n  )\n\n  const buttonGroupContext = inject(buttonGroupContextKey, undefined)\n  const globalConfig = useGlobalConfig('button')\n  const { form } = useFormItem()\n  const _size = useFormSize(computed(() => buttonGroupContext?.size))\n  const _disabled = useFormDisabled()\n  const _ref = ref<HTMLButtonElement>()\n  const slots = useSlots()\n\n  const _type = computed(\n    () =>\n      props.type || buttonGroupContext?.type || globalConfig.value?.type || ''\n  )\n  const autoInsertSpace = computed(\n    () => props.autoInsertSpace ?? globalConfig.value?.autoInsertSpace ?? false\n  )\n  const _plain = computed(\n    () => props.plain ?? globalConfig.value?.plain ?? false\n  )\n  const _round = computed(\n    () => props.round ?? globalConfig.value?.round ?? false\n  )\n  const _text = computed(() => props.text ?? globalConfig.value?.text ?? false)\n\n  const _props = computed(() => {\n    if (props.tag === 'button') {\n      return {\n        ariaDisabled: _disabled.value || props.loading,\n        disabled: _disabled.value || props.loading,\n        autofocus: props.autofocus,\n        type: props.nativeType,\n      }\n    }\n    return {}\n  })\n\n  // add space between two characters in Chinese\n  const shouldAddSpace = computed(() => {\n    const defaultSlot = slots.default?.()\n    if (autoInsertSpace.value && defaultSlot?.length === 1) {\n      const slot = defaultSlot[0]\n      if (slot?.type === Text) {\n        const text = slot.children as string\n        return /^\\p{Unified_Ideograph}{2}$/u.test(text.trim())\n      }\n    }\n    return false\n  })\n\n  const handleClick = (evt: MouseEvent) => {\n    if (_disabled.value || props.loading) {\n      evt.stopPropagation()\n      return\n    }\n    if (props.nativeType === 'reset') {\n      form?.resetFields()\n    }\n    emit('click', evt)\n  }\n\n  return {\n    _disabled,\n    _size,\n    _type,\n    _ref,\n    _props,\n    _plain,\n    _round,\n    _text,\n    shouldAddSpace,\n    handleClick,\n  }\n}\n","import { useSizeProp } from '@element-plus/hooks'\nimport { buildProps, definePropType, iconPropType } from '@element-plus/utils'\nimport { Loading } from '@element-plus/icons-vue'\n\nimport type { Component, ExtractPropTypes, __ExtractPublicPropTypes } from 'vue'\n\nexport const buttonTypes = [\n  'default',\n  'primary',\n  'success',\n  'warning',\n  'info',\n  'danger',\n  /**\n   * @deprecated\n   * Text type will be deprecated in the next major version (3.0.0)\n   */\n  'text',\n  '',\n] as const\nexport const buttonNativeTypes = ['button', 'submit', 'reset'] as const\n\nexport const buttonProps = buildProps({\n  /**\n   * @description button size\n   */\n  size: useSizeProp,\n  /**\n   * @description disable the button\n   */\n  disabled: Boolean,\n  /**\n   * @description button type\n   */\n  type: {\n    type: String,\n    values: buttonTypes,\n    default: '',\n  },\n  /**\n   * @description icon component\n   */\n  icon: {\n    type: iconPropType,\n  },\n  /**\n   * @description native button type\n   */\n  nativeType: {\n    type: String,\n    values: buttonNativeTypes,\n    default: 'button',\n  },\n  /**\n   * @description determine whether it's loading\n   */\n  loading: Boolean,\n  /**\n   * @description customize loading icon component\n   */\n  loadingIcon: {\n    type: iconPropType,\n    default: () => Loading,\n  },\n  /**\n   * @description determine whether it's a plain button\n   */\n  plain: {\n    type: Boolean,\n    default: undefined,\n  },\n  /**\n   * @description determine whether it's a text button\n   */\n  text: {\n    type: Boolean,\n    default: undefined,\n  },\n  /**\n   * @description determine whether it's a link button\n   */\n  link: Boolean,\n  /**\n   * @description determine whether the text button background color is always on\n   */\n  bg: Boolean,\n  /**\n   * @description native button autofocus\n   */\n  autofocus: Boolean,\n  /**\n   * @description determine whether it's a round button\n   */\n  round: {\n    type: Boolean,\n    default: undefined,\n  },\n  /**\n   * @description determine whether it's a circle button\n   */\n  circle: Boolean,\n  /**\n   * @description custom button color, automatically calculate `hover` and `active` color\n   */\n  color: String,\n  /**\n   * @description dark mode, which automatically converts `color` to dark mode colors\n   */\n  dark: Boolean,\n  /**\n   * @description automatically insert a space between two chinese characters\n   */\n  autoInsertSpace: {\n    type: Boolean,\n    default: undefined,\n  },\n  /**\n   * @description custom element tag\n   */\n  tag: {\n    type: definePropType<string | Component>([String, Object]),\n    default: 'button',\n  },\n} as const)\nexport const buttonEmits = {\n  click: (evt: MouseEvent) => evt instanceof MouseEvent,\n}\n\nexport type ButtonProps = ExtractPropTypes<typeof buttonProps>\nexport type ButtonPropsPublic = __ExtractPublicPropTypes<typeof buttonProps>\nexport type ButtonEmits = typeof buttonEmits\n\nexport type ButtonType = ButtonProps['type']\nexport type ButtonNativeType = ButtonProps['nativeType']\n\nexport interface ButtonConfigContext {\n  type?: string\n  plain?: boolean\n  text?: boolean\n  round?: boolean\n  autoInsertSpace?: boolean\n}\n","import { computed } from 'vue'\nimport { TinyColor } from '@ctrl/tinycolor'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormDisabled } from '@element-plus/components/form'\n\nimport type { ButtonProps } from './button'\n\nexport function darken(color: TinyColor, amount = 20) {\n  return color.mix('#141414', amount).toString()\n}\n\nexport function useButtonCustomStyle(props: ButtonProps) {\n  const _disabled = useFormDisabled()\n  const ns = useNamespace('button')\n\n  // calculate hover & active color by custom color\n  // only work when custom color\n  return computed(() => {\n    let styles: Record<string, string> = {}\n\n    let buttonColor = props.color\n\n    if (buttonColor) {\n      const match = (buttonColor as string).match(/var\\((.*?)\\)/)\n      if (match) {\n        buttonColor = window\n          .getComputedStyle(window.document.documentElement)\n          .getPropertyValue(match[1])\n      }\n      const color = new TinyColor(buttonColor)\n      const activeBgColor = props.dark\n        ? color.tint(20).toString()\n        : darken(color, 20)\n\n      if (props.plain) {\n        styles = ns.cssVarBlock({\n          'bg-color': props.dark\n            ? darken(color, 90)\n            : color.tint(90).toString(),\n          'text-color': buttonColor,\n          'border-color': props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString(),\n          'hover-text-color': `var(${ns.cssVarName('color-white')})`,\n          'hover-bg-color': buttonColor,\n          'hover-border-color': buttonColor,\n          'active-bg-color': activeBgColor,\n          'active-text-color': `var(${ns.cssVarName('color-white')})`,\n          'active-border-color': activeBgColor,\n        })\n\n        if (_disabled.value) {\n          styles[ns.cssVarBlockName('disabled-bg-color')] = props.dark\n            ? darken(color, 90)\n            : color.tint(90).toString()\n          styles[ns.cssVarBlockName('disabled-text-color')] = props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString()\n          styles[ns.cssVarBlockName('disabled-border-color')] = props.dark\n            ? darken(color, 80)\n            : color.tint(80).toString()\n        }\n      } else {\n        const hoverBgColor = props.dark\n          ? darken(color, 30)\n          : color.tint(30).toString()\n        const textColor = color.isDark()\n          ? `var(${ns.cssVarName('color-white')})`\n          : `var(${ns.cssVarName('color-black')})`\n        styles = ns.cssVarBlock({\n          'bg-color': buttonColor,\n          'text-color': textColor,\n          'border-color': buttonColor,\n          'hover-bg-color': hoverBgColor,\n          'hover-text-color': textColor,\n          'hover-border-color': hoverBgColor,\n          'active-bg-color': activeBgColor,\n          'active-border-color': activeBgColor,\n        })\n\n        if (_disabled.value) {\n          const disabledButtonColor = props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString()\n          styles[ns.cssVarBlockName('disabled-bg-color')] = disabledButtonColor\n          styles[ns.cssVarBlockName('disabled-text-color')] = props.dark\n            ? 'rgba(255, 255, 255, 0.5)'\n            : `var(${ns.cssVarName('color-white')})`\n          styles[ns.cssVarBlockName('disabled-border-color')] =\n            disabledButtonColor\n        }\n      }\n    }\n\n    return styles\n  })\n}\n","<template>\n  <component\n    :is=\"tag\"\n    ref=\"_ref\"\n    v-bind=\"_props\"\n    :class=\"buttonKls\"\n    :style=\"buttonStyle\"\n    @click=\"handleClick\"\n  >\n    <template v-if=\"loading\">\n      <slot v-if=\"$slots.loading\" name=\"loading\" />\n      <el-icon v-else :class=\"ns.is('loading')\">\n        <component :is=\"loadingIcon\" />\n      </el-icon>\n    </template>\n    <el-icon v-else-if=\"icon || $slots.icon\">\n      <component :is=\"icon\" v-if=\"icon\" />\n      <slot v-else name=\"icon\" />\n    </el-icon>\n    <span\n      v-if=\"$slots.default\"\n      :class=\"{ [ns.em('text', 'expand')]: shouldAddSpace }\"\n    >\n      <slot />\n    </span>\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useButton } from './use-button'\nimport { buttonEmits, buttonProps } from './button'\nimport { useButtonCustomStyle } from './button-custom'\n\ndefineOptions({\n  name: 'ElButton',\n})\n\nconst props = defineProps(buttonProps)\nconst emit = defineEmits(buttonEmits)\n\nconst buttonStyle = useButtonCustomStyle(props)\nconst ns = useNamespace('button')\nconst {\n  _ref,\n  _size,\n  _type,\n  _disabled,\n  _props,\n  _plain,\n  _round,\n  _text,\n  shouldAddSpace,\n  handleClick,\n} = useButton(props, emit)\nconst buttonKls = computed(() => [\n  ns.b(),\n  ns.m(_type.value),\n  ns.m(_size.value),\n  ns.is('disabled', _disabled.value),\n  ns.is('loading', props.loading),\n  ns.is('plain', _plain.value),\n  ns.is('round', _round.value),\n  ns.is('circle', props.circle),\n  ns.is('text', _text.value),\n  ns.is('link', props.link),\n  ns.is('has-bg', props.bg),\n])\n\ndefineExpose({\n  /** @description button html element */\n  ref: _ref,\n  /** @description button size */\n  size: _size,\n  /** @description button type */\n  type: _type,\n  /** @description button disabled */\n  disabled: _disabled,\n  /** @description whether adding space */\n  shouldAddSpace,\n})\n</script>\n","import { buttonProps } from './button'\n\nimport type { ExtractPropTypes, __ExtractPublicPropTypes } from 'vue'\n\nexport const buttonGroupProps = {\n  /**\n   * @description control the size of buttons in this button-group\n   */\n  size: buttonProps.size,\n  /**\n   * @description control the type of buttons in this button-group\n   */\n  type: buttonProps.type,\n} as const\nexport type ButtonGroupProps = ExtractPropTypes<typeof buttonGroupProps>\nexport type ButtonGroupPropsPublic = __ExtractPublicPropTypes<\n  typeof buttonGroupProps\n>\n","<template>\n  <div :class=\"ns.b('group')\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { provide, reactive, toRef } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { buttonGroupProps } from './button-group'\nimport { buttonGroupContextKey } from './constants'\n\ndefineOptions({\n  name: 'ElButtonGroup',\n})\nconst props = defineProps(buttonGroupProps)\nprovide(\n  buttonGroupContextKey,\n  reactive({\n    size: toRef(props, 'size'),\n    type: toRef(props, 'type'),\n  })\n)\nconst ns = useNamespace('button')\n</script>\n","import { withInstall, withNoopInstall } from '@element-plus/utils'\nimport Button from './src/button.vue'\nimport ButtonGroup from './src/button-group.vue'\n\nimport type { SFCWithInstall } from '@element-plus/utils'\n\nexport const ElButton: SFCWithInstall<typeof Button> & {\n  ButtonGroup: typeof ButtonGroup\n} = withInstall(Button, {\n  ButtonGroup,\n})\nexport const ElButtonGroup: SFCWithInstall<typeof ButtonGroup> =\n  withNoopInstall(ButtonGroup)\nexport default ElButton\n\nexport * from './src/button'\nexport * from './src/constants'\nexport type { ButtonInstance, ButtonGroupInstance } from './src/instance'\n"],"names":["checkboxProps","modelValue","type","Number","String","Boolean","default","label","Object","value","indeterminate","disabled","checked","name","trueValue","falseValue","trueLabel","falseLabel","id","border","size","useSizeProp","tabindex","validateEvent","useAriaProps","checkboxEmits","UPDATE_MODEL_EVENT","val","isString","isNumber","isBoolean","change","checkboxGroupContextKey","Symbol","useCheckboxDisabled","model","isChecked","checkboxGroup","inject","isLimitDisabled","computed","_a","_b","max","min","isUndefined","length","isDisabled","useFormDisabled","useCheckboxEvent","props","isLimitExceeded","hasOwnLabel","isLabeledByFormItem","formItem","useFormItem","emit","getCurrentInstance","getLabeledValue","_c","_d","includes","emitChangeEvent","e","CHANGE_EVENT","handleChange","target","onClickRoot","eventTargets","composedPath","hasLabel","some","item","tagName","nextTick","watch","validate","catch","err","debugWarn","useCheckboxModel","selfModel","ref","isGroup","get","set","isArray","changeEvent","call","useCheckboxStatus","slots","isFocused","actualValue","isPropAbsent","isObject","map","toRaw","o","isEqual","checkboxButtonSize","useFormSize","prop","checkboxSize","useCheckbox","elFormItem","inputId","useFormItemInputId","formItemContext","disableIdGeneration","disableIdManagement","setStoreValue","addToStore","push","useDeprecated","from","replacement","version","scope","useSlots","ns","useNamespace","compKls","b","m","is","spanKls","activeStyle","fillValue","fill","backgroundColor","borderColor","color","textColor","boxShadow","labelKls","bm","checkboxGroupProps","buildProps","definePropType","Array","tag","options","checkboxDefaultProps","checkboxGroupEmits","groupId","async","aliasProps","getOptionProps","option","base","provide","pick","toRefs","newVal","oldValue","_ctx","_cache","openBlock","createBlock","resolveDynamicComponent","ElCheckbox","withInstall","Checkbox","CheckboxButton","CheckboxGroup","withNoopInstall","_export_sfc","sfc","__vccOpts","key","badgeProps","isDot","hidden","values","showZero","badgeStyle","offset","badgeClass","content","style","_e","marginRight","addUnit","marginTop","expose","ElBadge","Badge","buttonGroupContextKey","useButton","buttonGroupContext","globalConfig","useGlobalConfig","form","_size","_disabled","_ref","_type","autoInsertSpace","_plain","plain","_round","round","_text","text","_props","ariaDisabled","loading","autofocus","nativeType","shouldAddSpace","defaultSlot","slot","Text","children","test","trim","handleClick","evt","stopPropagation","resetFields","buttonTypes","buttonNativeTypes","buttonProps","icon","iconPropType","loadingIcon","Loading","link","bg","circle","dark","buttonEmits","click","MouseEvent","darken","amount","mix","toString","useButtonCustomStyle","styles","buttonColor","match","window","getComputedStyle","document","documentElement","getPropertyValue","TinyColor","activeBgColor","tint","cssVarBlock","cssVarName","cssVarBlockName","hoverBgColor","isDark","disabledButtonColor","buttonStyle","buttonKls","mergeProps","ref_key","unref","buttonGroupProps","reactive","toRef","createElementBlock","class","normalizeClass","ElButton","Button","ButtonGroup"],"sourceRoot":""}